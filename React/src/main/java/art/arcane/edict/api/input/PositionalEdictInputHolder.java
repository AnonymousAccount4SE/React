/*
 *  Copyright (c) 2016-2025 Arcane Arts (Volmit Software)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 */

package art.arcane.edict.api.input;

import art.arcane.edict.api.parser.EdictValue;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.Singular;

import java.util.List;

/**
 * The PositionalEdictInputHolder class implements both the PositionalInput and EdictInput interfaces,
 * representing a type of EdictInput identified by its position in the Edict command handling system.
 * <br><br>
 * Each instance of this class holds both the actual position of the input in the command string (real position)
 * and its ordinal position amongst positional inputs (position). It also stores a list of parsed values
 * that are the result of parsing the input string as per the requirements of the command.
 */
@Data
@Builder
@AllArgsConstructor
public class PositionalEdictInputHolder implements PositionalInput, EdictInput {

    /**
     * The 'position' field represents the ordinal position of the input amongst positional inputs.
     * This means if there is a mapped parameter before this input it is ignored and wont increment.
     * This ensures that if there are 3 positional inputs there will only be 0 1 and 2 even if there are
     * mapped params in between the positional inputs.
     */
    private final int position;

    /**
     * The 'realPosition' field represents the actual position of the input in the command string.
     * This is the real location of the input value in the input string.
     */
    private final int realPosition;

    /**
     * The 'parsedValues' field holds a list of EdictValue objects, which are generated by parsing
     * the corresponding input string. Each EdictValue object represents a potential interpretation
     * of the input, along with an associated confidence level.
     */
    @Singular
    private final List<EdictValue<?>> parsedValues;
}
