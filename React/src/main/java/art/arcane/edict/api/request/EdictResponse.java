package art.arcane.edict.api.request;

import art.arcane.edict.api.Confidence;
import art.arcane.edict.api.endpoint.EdictEndpoint;
import lombok.Builder;
import lombok.Data;
import lombok.Singular;

import java.util.List;

/**
 * The EdictResponse class represents the response generated by an {@code EdictEndpoint}
 * after processing a given {@code EdictRequest}.
 * <p>
 * It includes information such as the original request, the endpoint that processed the request,
 * a match score reflecting the accuracy of the match between the input and the endpoint, and
 * a list of field responses representing the results of processing individual fields in the request.
 */
@Builder
@Data
public class EdictResponse {

    /**
     * The original EdictRequest that was processed to generate this response.
     */
    private EdictRequest request;

    /**
     * The EdictEndpoint that processed the request and generated this response.
     */
    private EdictEndpoint endpoint;

    /**
     * The match score reflecting the accuracy of the match between the input and the endpoint.
     */
    private int matchScore;

    /**
     * The list of EdictFieldResponse instances representing the results of processing individual fields in the request.
     */
    @Singular
    private List<EdictFieldResponse> fields;

    /**
     * Computes a score offset, which is a measure of how closely the input matched the endpoint's expectations.
     * <p>
     * The score offset takes into account the sum of the confidence levels for all the fields,
     * the difference between the number of inputs and the number of fields in the endpoint, and the match score.
     *
     * @return The calculated score offset.
     */
    public int getScoreOffset() {
        return (Math.abs(fields.stream().mapToInt(i -> ((Confidence.values().length - i.getConfidence().ordinal()))).sum() * 5)
            + Math.abs(request.getInputs().size() - endpoint.getFields().size()) + matchScore);
    }
}
