/*
 *  Copyright (c) 2016-2025 Arcane Arts (Volmit Software)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 *
 */

package art.arcane.edict.api.request;

import art.arcane.edict.api.Confidence;
import art.arcane.edict.api.endpoint.EdictEndpoint;
import lombok.Builder;
import lombok.Data;
import lombok.Singular;

import java.util.List;

/**
 * The EdictResponse class represents the response generated by an {@code EdictEndpoint}
 * after processing a given {@code EdictRequest}.
 * <br><br>
 * It includes information such as the original request, the endpoint that processed the request,
 * a match score reflecting the accuracy of the match between the input and the endpoint, and
 * a list of field responses representing the results of processing individual fields in the request.
 */
@Builder
@Data
public class EdictResponse {

    /**
     * The original EdictRequest that was processed to generate this response.
     */
    private EdictRequest request;

    /**
     * The EdictEndpoint that processed the request and generated this response.
     */
    private EdictEndpoint endpoint;

    /**
     * The match score reflecting the accuracy of the match between the input and the endpoint.
     */
    private int matchScore;

    /**
     * The list of EdictFieldResponse instances representing the results of processing individual fields in the request.
     */
    @Singular
    private List<EdictFieldResponse> fields;

    /**
     * Computes a score offset, which is a measure of how closely the input matched the endpoint's expectations.
     * <br><br>
     * The score offset takes into account the sum of the confidence levels for all the fields,
     * the difference between the number of inputs and the number of fields in the endpoint, and the match score.
     *
     * @return The calculated score offset.
     */
    public int getScoreOffset() {
        return (Math.abs(fields.stream().mapToInt(i -> ((Confidence.values().length - i.getConfidence().ordinal()))).sum() * 5)
                + Math.abs(request.getInputs().size() - endpoint.getFields().size()) + matchScore);
    }
}
